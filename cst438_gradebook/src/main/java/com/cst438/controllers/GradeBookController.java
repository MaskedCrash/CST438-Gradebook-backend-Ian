package com.cst438.controllers;

import java.util.ArrayList;
import java.util.List;
import java.text.SimpleDateFormat;  
import java.util.Date;  


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;

import com.cst438.domain.Assignment;
import com.cst438.domain.AssignmentListDTO;
import com.cst438.domain.AssignmentGrade;
import com.cst438.domain.AssignmentGradeRepository;
import com.cst438.domain.AssignmentRepository;
import com.cst438.domain.Course;
import com.cst438.domain.CourseDTOG;
import com.cst438.domain.CourseRepository;
import com.cst438.domain.Enrollment;
import com.cst438.domain.GradebookDTO;
import com.cst438.services.RegistrationService;

@RestController
@CrossOrigin(origins = {"http://localhost:3000","http://localhost:3001"})
public class GradeBookController {
	
	@Autowired
	AssignmentRepository assignmentRepository;
	
	@Autowired
	AssignmentGradeRepository assignmentGradeRepository;
	
	@Autowired
	CourseRepository courseRepository;
	
	@Autowired
	RegistrationService registrationService;
	
	// get assignments for an instructor that need grading
	//AS THIS WAS NOT REQUESTED TO BE CHANGED, IT WILL NOT BE CHANGED.
	//SHOULD it be changed? Eh. 
	//Actually, seeing as it has an Email preset, it needs to be changed in order to work.
	@GetMapping("/gradebook")
	public AssignmentListDTO getAssignmentsNeedGrading(@AuthenticationPrincipal OAuth2User principal) {
		
		String email = principal.getAttribute("email");	  // Get the email of the person who has logged in.
		
		List<Assignment> assignments = assignmentRepository.findNeedGradingByEmail(email);
		AssignmentListDTO result = new AssignmentListDTO();
		for (Assignment a: assignments) {
			result.assignments.add(new AssignmentListDTO.AssignmentDTO(a.getId(), a.getCourse().getCourse_id(), a.getName(), a.getDueDate().toString() , a.getCourse().getTitle()));
		}
		return result;
	}
	
	@GetMapping("/gradebook/{id}")
	public GradebookDTO getGradebook(@PathVariable("id") Integer assignmentId, @AuthenticationPrincipal OAuth2User principal) {
		
		String email = principal.getAttribute("email");	  // Get the email of the person who has logged in. Again.
		
		Assignment assignment = checkAssignment(assignmentId, email);
		
		// get the enrollment for the course
		//  for each student, get the current grade for assignment, 
		//   if the student does not have a current grade, create an empty grade
		GradebookDTO gradebook = new GradebookDTO();
		gradebook.assignmentId= assignmentId;
		gradebook.assignmentName = assignment.getName();
		for (Enrollment e : assignment.getCourse().getEnrollments()) {
			GradebookDTO.Grade grade = new GradebookDTO.Grade();
			grade.name = e.getStudentName();
			grade.email = e.getStudentEmail();
			// does student have a grade for this assignment
			AssignmentGrade ag = assignmentGradeRepository.findByAssignmentIdAndStudentEmail(assignmentId,  grade.email);
			if (ag != null) {
				grade.grade = ag.getScore();
				grade.assignmentGradeId = ag.getId();
			} else {
				grade.grade = "";
				AssignmentGrade agNew = new AssignmentGrade(assignment, e);
				agNew = assignmentGradeRepository.save(agNew);
				grade.assignmentGradeId = agNew.getId();  // key value generated by database on save.
			}
			gradebook.grades.add(grade);
		}
		return gradebook;
	}
	
	@PostMapping("/course/{course_id}/finalgrades")
	@Transactional
	public void calcFinalGrades(@PathVariable int course_id, @AuthenticationPrincipal OAuth2User principal) {
		System.out.println("Gradebook - calcFinalGrades for course " + course_id);
		
		// check that this request is from the course instructor 
		String email = principal.getAttribute("email");	  // We're No Strangers To Love
		
		Course c = courseRepository.findById(course_id).orElse(null);
		if (!c.getInstructor().equals(email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized. " );
		}
		
		CourseDTOG cdto = new CourseDTOG();
		cdto.course_id = course_id;
		cdto.grades = new ArrayList<>();
		for (Enrollment e: c.getEnrollments()) {
			double total=0.0;
			int count = 0;
			for (AssignmentGrade ag : e.getAssignmentGrades()) {
				count++;
				total = total + Double.parseDouble(ag.getScore());
			}
			double average = total/count;
			CourseDTOG.GradeDTO gdto = new CourseDTOG.GradeDTO();
			gdto.grade=letterGrade(average);
			gdto.student_email=e.getStudentEmail();
			gdto.student_name=e.getStudentName();
			cdto.grades.add(gdto);
			System.out.println("Course="+course_id+" Student="+e.getStudentEmail()+" grade="+gdto.grade);
		}
		
		registrationService.sendFinalGrades(course_id, cdto);
	}
	
	private String letterGrade(double grade) {
		if (grade >= 90) return "A";
		if (grade >= 80) return "B";
		if (grade >= 70) return "C";
		if (grade >= 60) return "D";
		return "F";
	}
	
	@PutMapping("/gradebook/{id}")
	@Transactional
	public void updateGradebook (@RequestBody GradebookDTO gradebook, @PathVariable("id") Integer assignmentId, @AuthenticationPrincipal OAuth2User principal ) {
		
		String email = principal.getAttribute("email");	  // You know the rules, and so Do I
		
		checkAssignment(assignmentId, email);  // check that user name matches instructor email of the course.
		
		// for each grade in gradebook, update the assignment grade in database 
		System.out.printf("%d %s %d\n",  gradebook.assignmentId, gradebook.assignmentName, gradebook.grades.size());
		
		for (GradebookDTO.Grade g : gradebook.grades) {
			System.out.printf("%s\n", g.toString());
			AssignmentGrade ag = assignmentGradeRepository.findById(g.assignmentGradeId).orElse(null);
			if (ag == null) {
				throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Invalid grade primary key. "+g.assignmentGradeId);
			}
			ag.setScore(g.grade);
			System.out.printf("%s\n", ag.toString());
			
			assignmentGradeRepository.save(ag);
		}
		
	}
	
	//NOTE: EDITING addAssignment in the gradebook controller class because I need to make it work
	//with react.js, and having it all be one dto doesn't seem to be possible
	@PostMapping("/assignment")
	@Transactional
	public AssignmentListDTO.AssignmentDTO addAssignment(@RequestParam String assignmentName, @RequestParam String dueDate, @RequestParam int courseID, @AuthenticationPrincipal OAuth2User principal) { 

		String email = principal.getAttribute("email");	  // A full commitment's what I'm thinking of

		Course course  = courseRepository.findById(courseID).orElse(null);
		
		if (!course.getInstructor().equals(email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized." );
		}
		else if (assignmentName!=null && dueDate!=null && course!=null) {
			// TODO check that today's date is not past add deadline for the course.
			Assignment newAssignment = new Assignment();
			newAssignment.setCourse(course);
			newAssignment.setName(assignmentName);	
			newAssignment.setDueDate(java.sql.Date.valueOf(dueDate));
			newAssignment.setNeedsGrading(1);
			Assignment savedAssignment = assignmentRepository.save(newAssignment);
			
			//gradebookService.enrollStudent(student_email, student.getName(), course.getCourse_id());
			
			
			AssignmentListDTO.AssignmentDTO result = createAssignmentDTO(newAssignment);
			//assignmentDTO.assignmentId = savedAssignment.getId();
			return result;
		} else {
			throw  new ResponseStatusException( HttpStatus.BAD_REQUEST, "Assignment addition failed. Assignmentname:"+
					assignmentName+" dueDate:"+dueDate+" course:"+course.getTitle());
		}
		
	}
	
	@DeleteMapping("/assignment/{assignmentId}")
	@Transactional
	public void deleteAssignment(  @PathVariable int assignmentId, @AuthenticationPrincipal OAuth2User principal  ) {
		
		String email = principal.getAttribute("email");	  // You wouldn't get this from any other guy

		// TODO  check that assignment is extant.
		
		Assignment newAssignment = assignmentRepository.findById(assignmentId).orElse(null);
		//Get the course so we can cross-check it.
		Course course  = newAssignment.getCourse();
		
		// TODO 
		if (course.getInstructor().equals(email)) {
			// OK.  drop the course.
			assignmentRepository.delete(newAssignment); 
		} else {
			// something is not right with the enrollment.  
			throw  new ResponseStatusException( HttpStatus.BAD_REQUEST, "Assignment_id invalid. "+assignmentId);
		}
	}
	
	
    @PutMapping("/assignmentupdate/{assignmentId}")
    @Transactional
    public Assignment updateAssignmentName(@PathVariable int assignmentId, @RequestBody String newName, @AuthenticationPrincipal OAuth2User principal )
    {
       
		String email = principal.getAttribute("email");	  // I Just wanna tell you how I'm feelin'

        Assignment newAssignment = assignmentRepository.findById(assignmentId).orElse(null);
		Course course  = newAssignment.getCourse();

        
        if (!course.getInstructor().equals(email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized." );
		}
        else if (newAssignment!=null) {
            newAssignment.setName(newName);
            
            return assignmentRepository.save(newAssignment);
        } 
        else 
        	throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "No assignment with that ID number was found." );
        
    }
	
	
	private Assignment checkAssignment(int assignmentId, String email) {
		// get assignment 
		Assignment assignment = assignmentRepository.findById(assignmentId).orElse(null);
		if (assignment == null) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Assignment not found. "+assignmentId );
		}
		// check that user is the course instructor
		if (!assignment.getCourse().getInstructor().equals(email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized. " );
		}
		
		return assignment;
	}
	
	private AssignmentListDTO.AssignmentDTO createAssignmentDTO(Assignment A) {
		AssignmentListDTO.AssignmentDTO assignmentDTO = new AssignmentListDTO.AssignmentDTO(A.getId(), A.getCourse().getCourse_id(), A.getName(), "\"2022-05-10", A.getCourse().getTitle());
        
        return assignmentDTO;
    }

}
